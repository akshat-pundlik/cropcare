import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

# ============================
# ðŸ“‚ 1. Paths to your dataset
# ============================
# Make sure these match your folder structure
BASE_DIR = "PLANT-DISEASE-IDENTIFICATION"
TRAIN_DIR = os.path.join(BASE_DIR, "train")
TEST_DIR = os.path.join(BASE_DIR, "test")

# ============================
# ðŸ§¼ 2. Image preprocessing
# ============================
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1.0 / 255)

train_gen = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

test_gen = test_datagen.flow_from_directory(
    TEST_DIR,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

num_classes = train_gen.num_classes
print(f"âœ… Number of classes detected: {num_classes}")

# ============================
# ðŸ§  3. Build Model (EfficientNet)
# ============================
base_model = EfficientNetB0(
    include_top=False,
    weights="imagenet",
    input_shape=(224, 224, 3)
)
base_model.trainable = False  # freeze base model for initial training

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dropout(0.3),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.3),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(
    optimizer=Adam(learning_rate=1e-4),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

# ============================
# ðŸ›‘ 4. Callbacks
# ============================
checkpoint = ModelCheckpoint(
    "plant_disease_model.keras",
    monitor="val_accuracy",
    save_best_only=True,
    mode="max"
)

early_stopping = EarlyStopping(
    monitor="val_loss",
    patience=5,
    restore_best_weights=True
)

# ============================
# ðŸš€ 5. Train Model
# ============================
EPOCHS = 15
history = model.fit(
    train_gen,
    validation_data=test_gen,
    epochs=EPOCHS,
    callbacks=[checkpoint, early_stopping],
    verbose=1
)

print("âœ… Training completed. Best model saved as 'plant_disease_model.keras'.")

# ============================
# ðŸ“ˆ 6. Optional: Fine-tune base
# ============================
base_model.trainable = True
for layer in base_model.layers[:100]:  # freeze first 100 layers
    layer.trainable = False

model.compile(
    optimizer=Adam(learning_rate=1e-5),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

fine_tune_epochs = 10
history_fine = model.fit(
    train_gen,
    validation_data=test_gen,
    epochs=fine_tune_epochs,
    callbacks=[checkpoint, early_stopping],
    verbose=1
)

print("âœ… Fine-tuning completed. Final model saved as 'plant_disease_model.keras'.")


