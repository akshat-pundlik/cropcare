# plant_disease_inference.ipynb

# %% [markdown]
# # Plant Disease Prediction with pre-trained model

# %% [code]
import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.preprocessing import image

# %% [markdown]
# ## 1. Load the model

# %% [code]
model_path = "plant_disease_model.keras"  # adjust path if needed
model = keras.models.load_model(model_path)
model.summary()

# %% [markdown]
# ## 2. Prepare class labels
# You need a mapping from numeric class indices to disease names.  
# Ideally from the original training (train directory names).

# Example:
class_names = [
    "Apple___Black_rot",
    "Apple___Cedar_apple_rust",
    "Apple___healthy",
    # … add all classes in same order as training
]

# %% [markdown]
# ## 3. Utility: load and preprocess a single image

# %% [code]
def load_and_preprocess(img_path, target_size=(224, 224)):
    img = image.load_img(img_path, target_size=target_size)
    img_array = image.img_to_array(img)
    img_array = img_array / 255.0  # normalize
    img_array = np.expand_dims(img_array, axis=0)  # make batch of 1
    return img_array

# %% [markdown]
# ## 4. Predict on a sample image

# %% [code]
test_img_path = "test/Apple___Black_rot/0ef9...jpg"  # adjust to an actual test image path
img_arr = load_and_preprocess(test_img_path, target_size=(224,224))

pred = model.predict(img_arr)
pred_class_idx = np.argmax(pred[0])
pred_confidence = pred[0][pred_class_idx]

print("Predicted class index:", pred_class_idx)
print("Confidence:", pred_confidence)

pred_class_name = class_names[pred_class_idx]
print("Predicted disease / class:", pred_class_name)

# %% [markdown]
# ## 5. Display image + predicted label

# %% [code]
plt.imshow(image.load_img(test_img_path))
plt.axis("off")
plt.title(f"Prediction: {pred_class_name} ({pred_confidence:.2f})")
plt.show()

# %% [markdown]
# ## 6. Batch prediction on a folder

# %% [code]
def predict_on_folder(folder_path):
    results = []
    for fname in os.listdir(folder_path):
        if fname.lower().endswith((".jpg", ".png", ".jpeg")):
            full = os.path.join(folder_path, fname)
            arr = load_and_preprocess(full)
            pred = model.predict(arr)
            idx = np.argmax(pred[0])
            conf = pred[0][idx]
            results.append((fname, class_names[idx], conf))
    return results

folder = "test/Apple___healthy"  # example
res = predict_on_folder(folder)
for fname, cls, conf in res:
    print(f"{fname} → {cls} ({conf:.2f})")

# %% [markdown]
# ## 7. (Optional) Evaluate accuracy across test set

# You could loop through all test subfolders, compare predicted vs true labels, and compute accuracy.

# %% [code]
def evaluate_test_dir(test_dir):
    total = 0
    correct = 0
    for class_name in os.listdir(test_dir):
        class_folder = os.path.join(test_dir, class_name)
        if not os.path.isdir(class_folder):
            continue
        for fname in os.listdir(class_folder):
            if not fname.lower().endswith((".jpg", ".png", ".jpeg")):
                continue
            img_path = os.path.join(class_folder, fname)
            arr = load_and_preprocess(img_path)
            pred = model.predict(arr)
            idx = np.argmax(pred[0])
            if class_names[idx] == class_name:
                correct += 1
            total += 1
    print("Test Accuracy = {:.2f}%".format(100 * correct / total))

test_dir = "test"
evaluate_test_dir(test_dir)

