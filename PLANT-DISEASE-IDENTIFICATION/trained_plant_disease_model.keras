import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import os

# --- CONFIGURATION ---

# âœ… Your model file name is correct. Ensure it's in the same folder as this script.
MODEL_PATH = os.path.abspath('trained_plant_disease_model.keras')

# âœ… Model input size is confirmed to be 128x128 from the model metadata.
IMG_HEIGHT = 128
IMG_WIDTH = 128

# ðŸš¨ CRITICAL: YOU MUST UPDATE THIS LIST ðŸš¨
# Replace these placeholders with the 38 (or however many) specific class names 
# your model was trained to recognize, in the exact order they were trained.
CLASS_NAMES = [
    'Apple__Black_rot',
    'Apple__Healthy',
    'Corn_(maize)__Common_rust',
    'Corn_(maize)__healthy',
    'Potato__Late_blight',
    'Potato__healthy',
    # ... Add ALL your disease classes here ...
    'Tomato__Mosaic_virus',
    'Tomato__healthy'
]
# ---------------------


def load_and_preprocess_image(img_path):
    """Loads an image, resizes it, converts it to a normalized batch tensor."""
    if not os.path.exists(img_path):
        print(f"Error: Image file not found at {img_path}")
        return None

    print(f"Loading and preprocessing image: {img_path}")
    try:
        # Load the image and ensure it's RGB
        img = Image.open(img_path).convert('RGB')

        # Resize the image to 128x128
        img = img.resize((IMG_WIDTH, IMG_HEIGHT))

        # Convert to numpy array
        img_array = np.array(img)

        # Add the batch dimension (1, 128, 128, 3)
        img_array = np.expand_dims(img_array, axis=0)

        # Normalize the pixel values (0-255 -> 0-1)
        normalized_img_array = img_array / 255.0

        return normalized_img_array

    except Exception as e:
        print(f"An error occurred during image processing: {e}")
        return None


def predict_disease(image_path_to_predict):
    """Loads the model and predicts the class of the input image."""
    try:
        print("Loading model...")
        model = load_model(MODEL_PATH)
        print("Model loaded successfully.")
    except Exception as e:
        print(f"Error loading model: {e}")
        print(f"Ensure '{MODEL_PATH}' is correct and in this directory.")
        return

    # 1. Prepare the image
    input_data = load_and_preprocess_image(image_path_to_predict)

    if input_data is None:
        return

    # 2. Make the prediction
    print("Making prediction...")
    predictions = model.predict(input_data)

    # 3. Interpret the result
    predicted_class_index = np.argmax(predictions[0])
    
    if 0 <= predicted_class_index < len(CLASS_NAMES):
        predicted_class_name = CLASS_NAMES[predicted_class_index]
        confidence = np.max(predictions[0]) * 100

        print("\n--- PREDICTION RESULT ---")
        print(f"Predicted Disease: **{predicted_class_name}**")
        print(f"Confidence: **{confidence:.2f}%**")
        print("-------------------------\n")
    else:
        print(f"Error: The model predicted class index {predicted_class_index}, but your CLASS_NAMES list only has {len(CLASS_NAMES)} items. Please correct your CLASS_NAMES list.")


# --- EXECUTION BLOCK ---
if __name__ == "__main__":
    # ðŸš¨ CRITICAL: UPDATE THIS PATH ðŸš¨
    # Change this to the actual path of the image you want to classify (e.g., 'test_images/apple_leaf.jpg')
    TEST_IMAGE_PATH = 'path/to/your/leaf_image.jpg'

    if os.path.exists(MODEL_PATH):
        predict_disease(TEST_IMAGE_PATH)
    else:
        print(f"FATAL ERROR: Model file '{MODEL_PATH}' not found. Place the .keras file in the same directory.")

